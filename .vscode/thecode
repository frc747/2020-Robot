/*----------------------------------------------------------------------------*/
/* Copyright (c) 2017-2018 FIRST. All Rights Reserved.                        */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package frc.robot;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;
import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.gradle file in the
 * project.
 */
public class Robot extends TimedRobot {
  public static Joystick stick1 = new Joystick(0);
  public static TalonSRX rightmotor1 = new TalonSRX(1);
  public static TalonSRX rightmotor2 = new TalonSRX(9);
  public static TalonSRX leftmotor1 = new TalonSRX(0);
  public static TalonSRX leftmotor2 = new TalonSRX(6);
  public static int timesup = 0;
  public static int othertimesup = 0;
  private static final String kDefaultAuto = "Default";
  private static final String kCustomAuto = "My Auto";
  private String m_autoSelected;
  public static double forwardcheck = 0;
  public static double stopcheck = 0;
  public static double backwardcheck = 0;
  public static double stopchecktwo = 0;
  public static double forwardchecktwo = 0;
  public static double rightenccount = 0;
  public static double tpi = 61.9283;
  public static double as;
  public static AHRS navx = new AHRS();
  public boolean forward;
  public boolean reset;
  public double leftSpeed;
  public double rightSpeed;
  public int FORCEstop = 0;
 

  /** 
   * This function is run when the robot is first started up and should be
   * used for any initialization code.
   */
  @Override
  public void robotInit() {

  
  }

  /**
   * This function is called every robot packet, no matter the mode. Use
   * this for items like diagnostics that you want ran during disabled,
   * autonomous, teleoperated and test.
   *
   * <p>This runs after the mode specific periodic functions, but before
   * LiveWindow and SmartDashboard integrated updating.
   */
  @Override
  public void robotPeriodic() {

 

    SmartDashboard.putNumber("RightMotorEncoder", rightmotor1.getSelectedSensorPosition());
    SmartDashboard.putNumber("LeftMotorEncoder", leftmotor1.getSelectedSensorPosition());
    SmartDashboard.putNumber("RightMotorInches", rightmotor1.getSelectedSensorPosition()/tpi);
    SmartDashboard.putNumber("LeftMotorInches", leftmotor1.getSelectedSensorPosition()/tpi);
    SmartDashboard.putNumber("NAVX angle", navx.getAngle());
    SmartDashboard.putBoolean("forward", forward);
    SmartDashboard.putNumber("As", as);
    SmartDashboard.putNumber("ls", leftSpeed);
    SmartDashboard.putNumber("rs", rightSpeed);

  }

  /**
   * This autonomous (along with the chooser code above) shows how to select
   * between different autonomous modes using the dashboard. The sendable
   * chooser code works with the Java SmartDashboard. If you prefer the
   * LabVIEW Dashboard, remove all of the chooser code and uncomment the
   * getString line to get the auto name from the text box below the Gyro
   *
   * <p>You can add additional auto modes by adding additional comparisons to
   * the switch structure below with additional strings. If using the
   * SendableChooser make sure to add them to the chooser code above as well.
   */
  @Override
  public void autonomousInit() {
    timesup = 0;
    othertimesup = 0;
    forwardcheck = 0;
    backwardcheck = 0;
    stopcheck = 0;
    stopchecktwo = 0;
    forward = false;
    forwardchecktwo = 0;    
reset = false;
  
    //navx.reset();
    rightmotor1.setSelectedSensorPosition(0);
    leftmotor1.setSelectedSensorPosition(0);
    // m_autoSelected = SmartDashboard.getString("Auto Selector", kDefaultAuto);
    System.out.println("Auto selected: " + m_autoSelected);
  }

  /**4
   * This function is called periodically during autonomous.
   */

  @Override
  public void autonomousPeriodic(){

     NetworkTable table = NetworkTableInstance.getDefault().getTable("limelight");
     NetworkTableEntry tx = table.getEntry("tx");
     NetworkTableEntry ty = table.getEntry("ty");
    NetworkTableEntry ta = table.getEntry("ta");
 
    double x = tx.getDouble(0.0);
   double y = ty.getDouble(0.0);
   double area = ta.getDouble(0.0);
   SmartDashboard.putNumber("LimelightX", x);
   SmartDashboard.putNumber("LimelightY", y);
   SmartDashboard.putNumber("LimelightArea", area);
double theanglemeasure = x/50;
if(theanglemeasure >1)
{
theanglemeasure = 1;
}
if(theanglemeasure < -1)
{
  theanglemeasure = -1;
}



if(x >10 || x<-10) {
  rightmotor1.set(ControlMode.PercentOutput, theanglemeasure);
  leftmotor1.set(ControlMode.PercentOutput, theanglemeasure);
}
 else if(area < 10)
  {
    rightmotor1.set(ControlMode.PercentOutput, -0.25);
    leftmotor1.set(ControlMode.PercentOutput, 0.25);
  }
  else if(area >60)
  {
    rightmotor1.set(ControlMode.PercentOutput, 0.3);
    leftmotor1.set(ControlMode.PercentOutput,  -0.3);
  }
  else if(area > 15)
  {
    rightmotor1.set(ControlMode.PercentOutput, 0);
    leftmotor1.set(ControlMode.PercentOutput,  0);
  }
  

  /*double inches = 30;
  double anglegoal = 90;
  // calculate inches goal and find out the speed to go at
  double inchgoal = inches * tpi;
  double leftError = inchgoal - leftmotor1.getSelectedSensorPosition();
  double rightError = -(-inchgoal - rightmotor1.getSelectedSensorPosition());
double ae = anglegoal - navx.getAngle();
  SmartDashboard.putNumber("left error: ", leftError);
  SmartDashboard.putNumber("right error: ", rightError);


  double pConstant = 1000;
double otherpc = 78;
  leftSpeed = leftError/pConstant;
   rightSpeed = -(rightError/pConstant);
as = ae/otherpc;
// if the speeds go past limit, set them to max
  if(leftSpeed > 1) {
    leftSpeed = 1;
  } else if (leftSpeed < -1) {
    leftSpeed = -1;
  }

  if(rightSpeed > 1) {
    rightSpeed = 1;
  } else if (rightSpeed < -1) {
    rightSpeed = -1;
  }
if(as >1)
{
  as =1;
}
else if(as <-1)
{
  as =-1;
}
// reset motors at beginning of code
if(reset == false)
{
rightmotor1.setSelectedSensorPosition(0);
leftmotor1.setSelectedSensorPosition(0);
reset = true;
}
// go forward and set of navx code(go forward)
if (forward != true)
{
  navx.reset();
  if(rightmotor1.getSelectedSensorPosition() > -1800)
  { 
    rightmotor1.set(ControlMode.PercentOutput, rightSpeed);
    leftmotor1.set(ControlMode.PercentOutput, leftSpeed);
  }
  else{
    rightmotor1.set(ControlMode.PercentOutput, 0);
    leftmotor1.set(ControlMode.PercentOutput,0);
    forward = true;
  }
} 
// do navx code(turn right)
 if(forward ==true)
      {
        rightmotor1.set(ControlMode.PercentOutput, as);
        leftmotor1.set(ControlMode.PercentOutput, as);
      }
      else if(navx.getAngle() < -90 && forward == true)
      {
        rightmotor1.set(ControlMode.PercentOutput, 0);
        leftmotor1.set(ControlMode.PercentOutput, 0);
      }
    
  

}
*/


// if(rightmotor1.getSelectedSensorPosition() > -goal/* this is the inches*/*tpi || leftmotor1.getSelectedSensorPosition() < goal/*this is da inches*/*tpi)
// {
//   rightmotor1.set(ControlMode.PercentOutput, -0.5);
//   leftmotor1.set(ControlMode.PercentOutput, 0.5);
// }   
// els
// {
//   rightmotor1.set(ControlMode.PercentOutput, 0);
//   leftmotor1.set(ControlMode.PercentOutput, 0);
// }

        // Put default auto code here
     /*   if(forwardcheck != 50)
        {
        leftmotor1.set(ControlMode.PercentOutput, 0.5);
        rightmotor1.set(ControlMode.PercentOutput, -0.5); 
        forwardcheck = forwardcheck + 1;
        }
        else if(stopcheck < 12)
        {
        leftmotor1.set(ControlMode.PercentOutput, 0.5);
        rightmotor1.set(ControlMode.PercentOutput, 0.5);
        stopcheck = stopcheck + 1;
        }
        else if(stopchecktwo != 1)
        {
          leftmotor1.set(ControlMode.PercentOutput, 0.25);
          rightmotor1.set(ControlMode.PercentOutput, 0.25);
          stopchecktwo = stopchecktwo + 1;
        }
        else if(backwardcheck != 50)
        {
        
        leftmotor1.set(ControlMode.PercentOutput, -0.5);
        rightmotor1.set(ControlMode.PercentOutput, 0.5);
        backwardcheck = backwardcheck + 1;
        }
        else if(forwardchecktwo != 0)
        {
        leftmotor1.set(ControlMode.PercentOutput, 0.5);
        rightmotor1.set(ControlMode.PercentOutput, -0.5);
        forwardchecktwo = forwardchecktwo + 1;
        }
        else
        {
forwardcheck = 0;
stopcheck = 0;
stopchecktwo = 0;
backwardcheck = 0;
forwardchecktwo = 0;
*/
        }
  
      
        
     
        
      
  /**
   * This function is called periodically during operator control.
   */
  @Override
  public void teleopInit() {
    FORCEstop = 0;
  }
  @Override
  public void teleopPeriodic() {
    NetworkTable table = NetworkTableInstance.getDefault().getTable("limelight");
    NetworkTableEntry tx = table.getEntry("tx");
    NetworkTableEntry ty = table.getEntry("ty");
   NetworkTableEntry ta = table.getEntry("ta");

   double x = tx.getDouble(0.0);
  double y = ty.getDouble(0.0);
  double area = ta.getDouble(0.0);
  SmartDashboard.putNumber("LimelightX", x);
  SmartDashboard.putNumber("LimelightY", y);
  SmartDashboard.putNumber("LimelightArea", area);
    forward = false;
    navx.reset();
    rightmotor1.setSelectedSensorPosition(0);
    leftmotor1.setSelectedSensorPosition(0);
    
    if(stick1.getRawButton(1)){
      FORCEstop = 1;
    }
      if(FORCEstop == 1)
      {
      rightmotor1.set(ControlMode.PercentOutput, 0);
      leftmotor1.set(ControlMode.PercentOutput, 0);
    }
    else{

    
  double motor1speed = stick1.getRawAxis(1);
  double motor2speed = stick1.getRawAxis(5);
  

      rightmotor1.set(ControlMode.PercentOutput, .35 * motor1speed);
      //rightmotor2.set(ControlMode.PercentOutput, motor1speed);
      leftmotor1.set(ControlMode.PercentOutput, -.35 * motor2speed);
  FORCEstop = 0;
        }    //leftmotor2.set(ControlMode.PercentOutput, -motor2speed);
  }

    
  /*
    This function is called periodically during test mode.
   */
  @Override
  public void testPeriodic() {
  }
}   

